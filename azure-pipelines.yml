trigger:
- main

variables:
  releaseBranchName: 'release'
  tag: '$(Build.BuildId)'
  imageRepository: 'demo-repo'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'

    variables:
      example: 'example'

    steps:
    - task: Docker@2
      inputs:
        command: 'build'
        Dockerfile: '**/Dockerfile'
        repository: $(imageRepository)
        tags: |
          $(tag)
    
    - task: ECRPushImage@1
      inputs:
        awsCredentials: 'sbd-aws'
        regionName: 'us-east-1'
        imageSource: 'imagename'
        sourceImageName: $(imageRepository)
        sourceImageTag: $(tag)
        pushTag: $(tag)
        repositoryName: $(imageRepository)
        autoCreateRepository: true
        outputVariable: 'ecrImageName'
        logRequest: true
        logResponse: true
        
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/manifests
        targetFolder: $(Build.ArtifactStagingDirectory)/k8s/manifests

    - publish: $(build.artifactStagingDirectory)
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: dev
    # variables:
    # - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'drop'
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'mlops-sandbox-cluster'
              namespace: 'dev'
              manifests: '$(Pipeline.Workspace)/drop/k8s/manifests/deployment.yaml'
              containers: '$(ecrImageName)'


# - stage: 'Test'
#   displayName: 'Deploy to the test environment'
#   dependsOn: Dev
#   #condition: eq(variables['Build.Reason'], 'Schedule')
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-20.04'
#     environment: test
#     variables:
#     - group: 'Release'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop
#           - task: AzureWebApp@1
#             displayName: 'Azure App Service Deploy: website'
#             inputs:
#               azureSubscription: 'Resource Manager - Tailspin - Space Game'
#               appName: '$(WebAppNameTest)'
#               package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

# - stage: 'Staging'
#   displayName: 'Deploy to the staging environment'
#   dependsOn: Test
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-20.04'
#     environment: staging
#     variables:
#     - group: 'Release'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop
#           - task: AzureWebApp@1
#             displayName: 'Azure App Service Deploy: website'
#             inputs:
#               azureSubscription: 'Resource Manager - Tailspin - Space Game'
#               appName: '$(WebAppNameStaging)'
#               package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'