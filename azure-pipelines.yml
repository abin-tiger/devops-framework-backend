trigger:
- main

variables:
  releaseBranchName: 'release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '5.x'

    steps:
    - task: Docker@2
      inputs:
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: demo-repo:latest
    
    - task: ECRPushImage@1
      inputs:
        awsCredentials: 'sbd-aws'
        regionName: 'us-east-1'
        imageSource: 'imagename'
        sourceImageName: 'demo-repo'
        repositoryName: 'demo-repo'
        autoCreateRepository: true
        outputVariable: 'ECR_IMAGE'
        logRequest: true
        logResponse: true
     
    
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

# - stage: 'Dev'
#   displayName: 'Deploy to the dev environment'
#   dependsOn: Build
#   condition: |
#     and
#     (
#       succeeded(),
#       eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
#     )
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-20.04'
#     # environment: dev
#     # variables:
#     # - group: Release
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop
#           - task: AzureWebApp@1
#             displayName: 'Azure App Service Deploy: website'
#             inputs:
#               azureSubscription: 'Resource Manager - Tailspin - Space Game'
#               appName: '$(WebAppNameDev)'
#               package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

# - stage: 'Test'
#   displayName: 'Deploy to the test environment'
#   dependsOn: Dev
#   #condition: eq(variables['Build.Reason'], 'Schedule')
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-20.04'
#     environment: test
#     variables:
#     - group: 'Release'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop
#           - task: AzureWebApp@1
#             displayName: 'Azure App Service Deploy: website'
#             inputs:
#               azureSubscription: 'Resource Manager - Tailspin - Space Game'
#               appName: '$(WebAppNameTest)'
#               package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

# - stage: 'Staging'
#   displayName: 'Deploy to the staging environment'
#   dependsOn: Test
#   jobs:
#   - deployment: Deploy
#     pool:
#       vmImage: 'ubuntu-20.04'
#     environment: staging
#     variables:
#     - group: 'Release'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop
#           - task: AzureWebApp@1
#             displayName: 'Azure App Service Deploy: website'
#             inputs:
#               azureSubscription: 'Resource Manager - Tailspin - Space Game'
#               appName: '$(WebAppNameStaging)'
#               package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'