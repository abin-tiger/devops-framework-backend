trigger:
- master

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'UnitTests'
    displayName: "Run unit tests"

    steps:
    - script: pip install -r requirements.txt
      displayName: 'Install requirements'

    - script: |
        pip install pytest pytest-azurepipelines
        pip install pytest-cov
        python -m pytest --doctest-modules --junitxml=junit/test-results.xml --cov=hello_app --cov-report=xml
      displayName: 'pytest'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Hello App'

  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'

    steps:
    - task: Docker@2
      inputs:
        command: 'build'
        Dockerfile: '**/Dockerfile'
        repository: $(imageRepository)
        tags: |
          $(tag)
    
    - task: ECRPushImage@1
      name: 'PushToECR'
      inputs:
        awsCredentials: 'sbd-aws'
        regionName: 'us-east-1'
        imageSource: 'imagename'
        sourceImageName: $(imageRepository)
        sourceImageTag: $(tag)
        pushTag: $(tag)
        repositoryName: $(imageRepository)
        autoCreateRepository: true
        outputVariable: 'ecrPushOutput'
        logRequest: true
        logResponse: true

    - pwsh: |
        Write-Host "##vso[task.setvariable variable=ecrImage;isOutput=true]$(ecrPushOutput)"
      name: ECRImageOutputStep
        
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/manifests
        targetFolder: $(Build.ArtifactStagingDirectory)/k8s/manifests

    - publish: $(build.artifactStagingDirectory)
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    variables:
      ecrImageName: $[stageDependencies.Build.Build.outputs['ECRImageOutputStep.ecrImage']]
    pool:
      vmImage: 'ubuntu-20.04'
    environment: dev
    # variables:
    # - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'drop'
          - task: CmdLine@2
            inputs:
              script: echo "Deploying image $(ecrImageName)"

          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'mlops-sandbox-cluster'
              namespace: 'dev'
              manifests: '$(Pipeline.Workspace)/drop/k8s/manifests/deployment.yaml'
              containers: '$(ecrImageName)'


- stage: 'Prod'
  displayName: 'Deploy to the prod environment'
  dependsOn:
  - Build
  - Dev
  #condition: eq(variables['Build.Reason'], 'Schedule')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: prod
    variables:
      ecrImageName: $[stageDependencies.Build.Build.outputs['ECRImageOutputStep.ecrImage']]
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'drop'
          - task: CmdLine@2
            inputs:
              script: echo "Deploying image $(ecrImageName)"
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'mlops-sandbox-cluster'
              namespace: 'prod'
              manifests: '$(Pipeline.Workspace)/drop/k8s/manifests/deployment.yaml'
              containers: '$(ecrImageName)'